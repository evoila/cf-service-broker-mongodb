heat_template_version: 2015-10-15
description: Deployment Description for MongoDB Replica Set
parameters:
  image_id:
    type: string
    description: Image used for servers
  keypair:
    type: string
    description: SSH key to connect to the servers
  flavor:
    type: string
    description: flavor used by the web servers
  network_id:
    type: string
    description: Network used by the server
  volume_size:
    type: number
    description: Size of the volume to be created.
  availability_zone:
    type: string
    description: The Availability Zone to launch the instance.
  database_name:
    type: string
    description: Database name
  database_user:
    type: string
    description: Database user
  database_password:
    type: string
    description: Database password
  database_number:
    type: string
    description: Database number
  database_key:
    type: string
    description: Database key
  secondary_number:
    type: number
    description: number of secondaries for replica set
resources:
  wait_handle:
    type: OS::Heat::WaitConditionHandle
  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: wait_handle }
      count: { get_param: secondary_number }
      timeout: 600
  nova_instance_sec:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: secondary_number }
      resource_def:
        type: https://raw.githubusercontent.com/evoila/cf-service-broker/master/custom-mongodb/src/main/resources/openstack/templateSingleSec.yaml
        properties:
          image_id: { get_param: image_id}
          network_id: { get_param: network_id}
          volume_size: { get_param: volume_size}
          keypair: { get_param: keypair}
          flavor: { get_param: flavor}
          availability_zone: { get_param: availability_zone}
          user_data:
            str_replace:
              template: |
                #!/bin/bash

                export REPOSITORY_MONGO="https://bitbucket.org/evoila-boxer/deployment-scripts-docker-openstack/raw/HEAD/mongodb"
                export REPOSITORY_MONIT="https://bitbucket.org/evoila-boxer/deployment-scripts-docker-openstack/raw/HEAD/monit"
                export REPOSITORY_MAIN="https://bitbucket.org/evoila-boxer/deployment-scripts-docker-openstack/raw/HEAD"
                export KEY="LDXOxI6ao87VWgSwrzjhjNnCpmheJdQbtMrgQNR2KVl2/9ca0Gd1BQ"

                wget $REPOSITORY_MONGO/mongo-template.sh --no-cache
                chmod +x mongo-template.sh
                ./mongo-template.sh -d $db_name -u $db_user -p $db_password -e openstack

                echo $db_name $db_user $db_password

                wget $REPOSITORY_MONGO_HA/mongo-HA-repset-template.sh --no-cache
                chmod +x mongo-HA-repset-template.sh
                echo /mongo-HA-repset-template.sh -d $db_name -u $db_user -p $db_password -r $repset_name -k $key -m dummy -s dummy -a secondary
                ./mongo-HA-repset-template.sh -d $db_name -u $db_user -p $db_password -r $repset_name -k $key -m dummy -s dummy -a secondary

                wc_notify --data-binary '{"status": "SUCCESS", "id": %index% }'

              params:
                $db_name: {get_param: database_name}
                $db_user: {get_param: database_user}
                $db_password: {get_param: database_password}
                $repset_name: rs1
                $key: {get_param: database_key}
                wc_notify: { get_attr: [  'wait_handle', 'curl_cli'] }
  port_prim:
    type: OS::Neutron::Port
    properties:
      network_id: {get_param: network_id}
      security_groups:
        - all
  cinder_volume_prim:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: volume_size }
      availability_zone: { get_param: availability_zone }
  volume_attachment_prim:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id: { get_resource: cinder_volume_prim }
      instance_uuid: { get_resource: nova_instance_prim }
      mountpoint: /dev/vdc
  nova_instance_prim:
    type: OS::Nova::Server
    depends_on: wait_condition
    properties:
      flavor: {get_param: flavor}
      image: {get_param: image_id}
      key_name: {get_param: keypair}
      networks:
      - port: {get_resource: port_prim}
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash

            export REPOSITORY_MONGO="https://bitbucket.org/evoila-boxer/deployment-scripts-docker-openstack/raw/HEAD/mongodb"
            export REPOSITORY_MONIT="https://bitbucket.org/evoila-boxer/deployment-scripts-docker-openstack/raw/HEAD/monit"
            export REPOSITORY_MAIN="https://bitbucket.org/evoila-boxer/deployment-scripts-docker-openstack/raw/HEAD"
            export KEY="LDXOxI6ao87VWgSwrzjhjNnCpmheJdQbtMrgQNR2KVl2/9ca0Gd1BQ"

            wget $REPOSITORY_MONGO/mongo-template.sh
            chmod +x mongo-template.sh
            ./mongo-template.sh -d $db_name -u $db_user -p $db_password -e openstack

            echo $db_name $db_user $db_password

            wget $REPOSITORY_MONGO_HA/mongo-HA-repset-template.sh
            chmod +x mongo-HA-repset-template.sh
            echo cmueller inputcheck
            echo mongo-HA-repset-template.sh -d $db_name -u $db_user -p $db_password -r $repset_name -k $key -m $instance_ip_primary -s $instance_ips_secondary -a primary
            ./mongo-HA-repset-template.sh -d $db_name -u $db_user -p $db_password -r $repset_name -k $key -m $instance_ip_primary -s $instance_ips_secondary -a primary

          params:
            $db_name: {get_param: database_name}
            $db_user: {get_param: database_user}
            $db_password: {get_param: database_password}
            $key: {get_param: database_key}
            $repset_name: rs1
            $instance_ip_primary: { get_attr: [port_prim, fixed_ips, 0, ip_address] }
            $instance_ips_secondary:
              str_replace:
                template: { list_join: [', ', { get_attr: [ nova_instance_sec, ip ] }] }
                params: { ' ': '' }
outputs:
  ip_pool:
    value:
      str_replace:
        template: { list_join: [', ',  { get_attr: [port_prim, fixed_ips, 0, ip_address] }, { get_attr: [ nova_instance_sec, ip ] }] }
        params: { ' ': '' }
  sec_ips:
    value: { get_attr : [ nova_instance_sec, ip ]}
    description: Array of IPs of secondray instances
  prim_ip:
    value:  { get_attr: [port_prim, fixed_ips, 0, ip_address] }
    description: IP of primary mongo replica
